//Dijkstra works for n iterations and in each iteration (1) it chooses an unmarked node with least distance (2) make that node marked and do relaxations from this node.
//At the end of this algorithm d -> stores the minimum distances from source s, and p - parent array
//Above idea is implemented here , using priority_queue(min heap)... can also be done with std::set<pair<int,int>> .
const int N=2e5+10;
const int inf=(1<<30);
vector<pair<int,int>>adj[N];
void dijkstra(int s,vector<int>&d,vector<int>&p,int n){
    d.assign(n+1,inf);
    p.assign(n+1,-1);
    d[s]=0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
    pq.push({0,s});
    while(!pq.empty()){
        int u=pq.top().second;
        int dist=pq.top().first;
        pq.pop();
        if(d[u]!=dist)continue;
        for(auto [v,wt]:adj[u]){
            if((d[v]>d[u]+wt){
                p[v]=u;
                d[v]=d[u]+wt;
                pq.push({d[v],v});
            }
        }
    }
}
//O(nlogn +mlogn)
vector<int>path(int s,int t,vector<int> const&p){
    vector<int>r;
    for(int u=t;u!=s;u=p[u]){
        r.push_back(u);
    }
    r.push_back(s);
    reverse(r.begin(),r.end());
    return r;
}

